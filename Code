# Install required packages if not already installed
!pip install -q scikit-learn tensorflow matplotlib seaborn

# Import libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, accuracy_score, roc_auc_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import AdaBoostClassifier
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load dataset (replace with actual path or dataset)
# Example: Parkinsonâ€™s dataset from UCI
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/parkinsons.data'
data = pd.read_csv(url)

# Prepare features and labels
X = data.drop(columns=['name', 'status'])  # 'status' is target, 'name' is not a feature
y = data['status']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# --- k-NN Classifier ---
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train_scaled, y_train)
y_pred_knn = knn.predict(X_test_scaled)
print("k-NN Accuracy:", accuracy_score(y_test, y_pred_knn))

# --- AdaBoost Classifier ---
ada = AdaBoostClassifier(n_estimators=50, random_state=42)
ada.fit(X_train_scaled, y_train)
y_pred_ada = ada.predict(X_test_scaled)
print("AdaBoost Accuracy:", accuracy_score(y_test, y_pred_ada))

# --- Artificial Neural Network (ANN) ---
ann = Sequential([
    Dense(64, input_dim=X_train_scaled.shape[1], activation='relu'),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])
ann.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
ann.fit(X_train_scaled, y_train, epochs=50, batch_size=8, verbose=0)
ann_eval = ann.evaluate(X_test_scaled, y_test, verbose=0)
print("ANN Accuracy:", ann_eval[1])
